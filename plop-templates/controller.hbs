import { Selectable } from 'kysely'
// transitive dependency of `@asteasolutions/zod-to-openapi`
import type { TagObject } from 'openapi3-ts/oas31'
import { z } from 'zod'
import { validateRequest } from 'zod-express-middleware'

import { db } from '@/api/database/client'
import { DB } from '@/api/database/db'
import { registry } from '@/api/spec/registry'
import { makeHandlers } from '@/api/utils/express-types'

throw 'fix these fields and delete me'
const {{ camelCase name }}Schema = z
  .object({
    id: z.string().uuid(),
    firstName: z.string(),
    lastName: z.string().nullable(),
    gender: z.string(),
    createdAt: z.date(),
  })
  .openapi({
    example: {
      id: 'f4853b42-8aa8-48ce-83b2-390bbe230cd0',
      firstName: 'John',
      lastName: 'Doe',
      gender: 'male',
      createdAt: new Date('2023-08-04 19:33:00.636659+00'),
    },
  })

type {{ camelCase name }}Schema = z.infer<typeof {{ camelCase name }}Schema>

throw 'fix these fields and delete me'
// this is a manual mapping from DB schema to application interface
const personToResponse = (person: Selectable<DB['persons']>): {{ camelCase name }}Schema => {
  const response = {
    id: person.id,
    firstName: person.first_name,
    lastName: person.last_name,
    gender: person.gender,
    createdAt: person.created_at,
  } satisfies {{ camelCase name }}Schema
  return response
}

export class {{ properCase name }}sController {
  // For ApiDocs
  static spec: {
    tag: TagObject
  } = {
    tag: {
      name: '{{ properCase name }}',
      description: '{{ sentenceCase description }}',
    },
  }

  static get{{ properCase name }}s = {
    params: undefined,
    response: z.array({{ camelCase name }}Schema),
    handler() {
      const handlers = makeHandlers(null, async (req, res) => {
        throw 'fix this query and delete me'

        // query the DB
        const users = await db.selectFrom('persons').selectAll().execute()
        // manually map DB schema to application interface
        const mapped = users.map((user) => personToResponse(user))
        const parseResult =
          {{ properCase name }}sController.get{{ properCase name }}s.response.safeParse(mapped)

        if (!parseResult.success) {
          res.status(500).json({
            error: parseResult.error,
          })
        }

        if (parseResult.success) {
          res.json(parseResult.data)
        }
      })
      return handlers
    },
  }

  static get{{ properCase name }} = {
    params: z
      .object({
        // FIXME!
        user_id: z.string().uuid(),
      })
      .openapi({ example: { user_id: '9d65dd84-6fa2-4732-9916-20153a7c4348' } }),
    response: {{ camelCase name }}Schema,
    handler() {
      const handlers = makeHandlers(
        validateRequest({
          params: {{ properCase name }}sController.get{{ properCase name }}.params,
        }),
        (req, res) => {
          res.json({
            user: {
              id: req.params.user_id,
            },
          })
        }
      )
      return handlers
    },
  }

  static create{{ properCase name }} = {
    body: {{ camelCase name }}Schema.omit({ id: true, createdAt: true }).openapi({
      example: {
        firstName: 'John',
        lastName: 'Doe',
        gender: 'male',
      },
    }),
    response: {{ camelCase name }}Schema,
    handler() {
      const handlers = makeHandlers(
        validateRequest({
          body: {{ properCase name }}sController.create{{ properCase name }}.body,
        }),
        async (req, res) => {
          // insert into DB
          throw 'fix this query and delete me'
          const insertResult = await db
            .insertInto('persons')
            .values({
              first_name: req.body.firstName,
              last_name: req.body.lastName,
              gender: req.body.gender,
            })
            .returningAll()
            .execute()
          // manually map DB schema to application interface
          const mapped = personToResponse(insertResult[0])

          const parseResult =
            {{ properCase name }}sController.create{{ properCase name }}.response.safeParse(mapped)

          if (!parseResult.success) {
            res.status(500).json({
              error: parseResult.error,
            })
          }
          if (parseResult.success) {
            res.status(201).json(parseResult.data)
          }
        }
      )
      return handlers
    },
  }
}

registry.registerPath({
  method: 'get',
  operationId: 'get{{ properCase name }}s',
  path: '/{{ name }}s',
  tags: [{{ properCase name }}sController.spec.tag.name],
  summary: 'Get all users',
  description: 'Get all users',
  request: {},
  responses: {
    200: {
      description: 'FIX ME',
      content: {
        'application/json': {
          schema: {{ properCase name }}sController.get{{ properCase name }}s.response,
        },
      },
    },
  },
})

registry.registerPath({
  method: 'get',
  operationId: 'get{{ properCase name }}',
  path: '/{{ name }}s/{id}',
  tags: [{{ properCase name }}sController.spec.tag.name],
  description: 'FIX ME',
  summary: 'Get a single {{ name }}',
  request: {
    params: {{ properCase name }}sController.get{{ properCase name }}.params,
  },
  responses: {
    200: {
      description: 'FIX ME',
      content: {
        'application/json': {
          schema: {{ properCase name }}sController.get{{ properCase name }}.response,
        },
      },
    },
  },
})

registry.registerPath({
  method: 'post',
  operationId: 'create{{ properCase name }}',
  path: '/{{ name }}s',
  tags: [{{ properCase name }}sController.spec.tag.name],
  description: 'Create a new {{ name }}',
  summary: 'Create a new {{ name }}',
  request: {
    body: {
      description: 'Payload for creating a new {{ name }}.',
      content: {
        'application/json': {
          schema: {{ properCase name }}sController.create{{ properCase name }}.body,
        },
      },
    },
  },
  responses: {
    201: {
      description: 'FIX ME',
      content: {
        'application/json': {
          schema: {{ properCase name }}sController.create{{ properCase name }}.response,
        },
      },
    },
  },
})
